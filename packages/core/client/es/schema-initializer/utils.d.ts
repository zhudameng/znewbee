import { ISchema, Schema } from '@formily/react';
import { SchemaInitializerItemOptions } from '../';
export declare const itemsMerge: (items1: any, items2: any) => any;
export declare const gridRowColWrap: (schema: ISchema) => {
    type: string;
    'x-component': string;
    properties: {
        [x: string]: {
            type: string;
            'x-component': string;
            properties: {
                [x: string]: import("@formily/react").Stringify<{
                    [key: symbol]: any;
                    [key: `x-${string}`]: any;
                    [key: `x-${number}`]: any;
                    version?: string;
                    name?: import("@formily/react").SchemaKey;
                    title?: any;
                    description?: any;
                    default?: any;
                    readOnly?: boolean;
                    writeOnly?: boolean;
                    type?: import("@formily/react").SchemaTypes;
                    enum?: import("@formily/react").SchemaEnum<any>;
                    const?: any;
                    multipleOf?: number;
                    maximum?: number;
                    exclusiveMaximum?: number;
                    minimum?: number;
                    exclusiveMinimum?: number;
                    maxLength?: number;
                    minLength?: number;
                    pattern?: string | RegExp;
                    maxItems?: number;
                    minItems?: number;
                    uniqueItems?: boolean;
                    maxProperties?: number;
                    minProperties?: number;
                    required?: string | boolean | string[];
                    format?: string;
                    $ref?: string;
                    $namespace?: string;
                    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
                    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
                    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
                    additionalItems?: import("@formily/react").Stringify<any>;
                    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
                    additionalProperties?: import("@formily/react").Stringify<any>;
                    "x-value"?: any;
                    "x-index"?: number;
                    "x-pattern"?: any;
                    "x-display"?: any;
                    "x-validator"?: any;
                    "x-decorator"?: any;
                    "x-decorator-props"?: any;
                    "x-component"?: any;
                    "x-component-props"?: any;
                    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
                    "x-content"?: any;
                    "x-data"?: any;
                    "x-visible"?: boolean;
                    "x-hidden"?: boolean;
                    "x-disabled"?: boolean;
                    "x-editable"?: boolean;
                    "x-read-only"?: boolean;
                    "x-read-pretty"?: boolean;
                }>;
            };
        };
    };
};
export declare const removeTableColumn: (schema: any, cb: any) => void;
export declare const removeGridFormItem: (schema: any, cb: any) => void;
export declare const useRemoveGridFormItem: () => (schema: any, cb: any) => void;
export declare const findTableColumn: (schema: Schema, key: string, action: string, deepth?: number) => unknown;
export declare const useTableColumnInitializerFields: () => SchemaInitializerItemOptions[];
export declare const useFormItemInitializerFields: (options?: any) => SchemaInitializerItemOptions[];
export declare const useCustomFormItemInitializerFields: (options?: any) => SchemaInitializerItemOptions[];
export declare const useCurrentSchema: (action: string, key: string, find?: (schema: Schema, key: string, action: string) => any, rm?: (schema: any, cb: any) => any) => {
    schema: any;
    exists: boolean;
    remove(): void;
};
export declare const useRecordCollectionDataSourceItems: (componentName: any) => ({
    type: string;
    name: string;
    title: string;
    key?: undefined;
    children?: undefined;
} | {
    type: string;
    name?: undefined;
    title?: undefined;
    key?: undefined;
    children?: undefined;
} | {
    key: string;
    type: string;
    name: string;
    title: string;
    children: any;
})[];
export declare const useCollectionDataSourceItems: (componentName: any) => {
    key: string;
    type: string;
    title: string;
    children: ({
        type: string;
        name: any;
        title: any;
        key?: undefined;
        children?: undefined;
    } | {
        key: string;
        type: string;
        name: string;
        title: any;
        children: ({
            type: string;
            name: any;
            title: string;
            key?: undefined;
            children?: undefined;
        } | {
            type: string;
            name?: undefined;
            title?: undefined;
            key?: undefined;
            children?: undefined;
        } | {
            key: string;
            type: string;
            name: string;
            title: string;
            children: any;
        })[];
    })[];
}[];
export declare const createDetailsBlockSchema: (options: any) => import("@formily/react").Stringify<{
    [key: symbol]: any;
    [key: `x-${string}`]: any;
    [key: `x-${number}`]: any;
    version?: string;
    name?: import("@formily/react").SchemaKey;
    title?: any;
    description?: any;
    default?: any;
    readOnly?: boolean;
    writeOnly?: boolean;
    type?: import("@formily/react").SchemaTypes;
    enum?: import("@formily/react").SchemaEnum<any>;
    const?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string | RegExp;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string | boolean | string[];
    format?: string;
    $ref?: string;
    $namespace?: string;
    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
    additionalItems?: import("@formily/react").Stringify<any>;
    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    additionalProperties?: import("@formily/react").Stringify<any>;
    "x-value"?: any;
    "x-index"?: number;
    "x-pattern"?: any;
    "x-display"?: any;
    "x-validator"?: any;
    "x-decorator"?: any;
    "x-decorator-props"?: any;
    "x-component"?: any;
    "x-component-props"?: any;
    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
    "x-content"?: any;
    "x-data"?: any;
    "x-visible"?: boolean;
    "x-hidden"?: boolean;
    "x-disabled"?: boolean;
    "x-editable"?: boolean;
    "x-read-only"?: boolean;
    "x-read-pretty"?: boolean;
}>;
export declare const createFormBlockSchema: (options: any) => import("@formily/react").Stringify<{
    [key: symbol]: any;
    [key: `x-${string}`]: any;
    [key: `x-${number}`]: any;
    version?: string;
    name?: import("@formily/react").SchemaKey;
    title?: any;
    description?: any;
    default?: any;
    readOnly?: boolean;
    writeOnly?: boolean;
    type?: import("@formily/react").SchemaTypes;
    enum?: import("@formily/react").SchemaEnum<any>;
    const?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string | RegExp;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string | boolean | string[];
    format?: string;
    $ref?: string;
    $namespace?: string;
    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
    additionalItems?: import("@formily/react").Stringify<any>;
    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    additionalProperties?: import("@formily/react").Stringify<any>;
    "x-value"?: any;
    "x-index"?: number;
    "x-pattern"?: any;
    "x-display"?: any;
    "x-validator"?: any;
    "x-decorator"?: any;
    "x-decorator-props"?: any;
    "x-component"?: any;
    "x-component-props"?: any;
    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
    "x-content"?: any;
    "x-data"?: any;
    "x-visible"?: boolean;
    "x-hidden"?: boolean;
    "x-disabled"?: boolean;
    "x-editable"?: boolean;
    "x-read-only"?: boolean;
    "x-read-pretty"?: boolean;
}>;
export declare const createReadPrettyFormBlockSchema: (options: any) => import("@formily/react").Stringify<{
    [key: symbol]: any;
    [key: `x-${string}`]: any;
    [key: `x-${number}`]: any;
    version?: string;
    name?: import("@formily/react").SchemaKey;
    title?: any;
    description?: any;
    default?: any;
    readOnly?: boolean;
    writeOnly?: boolean;
    type?: import("@formily/react").SchemaTypes;
    enum?: import("@formily/react").SchemaEnum<any>;
    const?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string | RegExp;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string | boolean | string[];
    format?: string;
    $ref?: string;
    $namespace?: string;
    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
    additionalItems?: import("@formily/react").Stringify<any>;
    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    additionalProperties?: import("@formily/react").Stringify<any>;
    "x-value"?: any;
    "x-index"?: number;
    "x-pattern"?: any;
    "x-display"?: any;
    "x-validator"?: any;
    "x-decorator"?: any;
    "x-decorator-props"?: any;
    "x-component"?: any;
    "x-component-props"?: any;
    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
    "x-content"?: any;
    "x-data"?: any;
    "x-visible"?: boolean;
    "x-hidden"?: boolean;
    "x-disabled"?: boolean;
    "x-editable"?: boolean;
    "x-read-only"?: boolean;
    "x-read-pretty"?: boolean;
}>;
export declare const createTableBlockSchema: (options: any) => import("@formily/react").Stringify<{
    [key: symbol]: any;
    [key: `x-${string}`]: any;
    [key: `x-${number}`]: any;
    version?: string;
    name?: import("@formily/react").SchemaKey;
    title?: any;
    description?: any;
    default?: any;
    readOnly?: boolean;
    writeOnly?: boolean;
    type?: import("@formily/react").SchemaTypes;
    enum?: import("@formily/react").SchemaEnum<any>;
    const?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string | RegExp;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string | boolean | string[];
    format?: string;
    $ref?: string;
    $namespace?: string;
    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
    additionalItems?: import("@formily/react").Stringify<any>;
    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    additionalProperties?: import("@formily/react").Stringify<any>;
    "x-value"?: any;
    "x-index"?: number;
    "x-pattern"?: any;
    "x-display"?: any;
    "x-validator"?: any;
    "x-decorator"?: any;
    "x-decorator-props"?: any;
    "x-component"?: any;
    "x-component-props"?: any;
    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
    "x-content"?: any;
    "x-data"?: any;
    "x-visible"?: boolean;
    "x-hidden"?: boolean;
    "x-disabled"?: boolean;
    "x-editable"?: boolean;
    "x-read-only"?: boolean;
    "x-read-pretty"?: boolean;
}>;
export declare const createTableSelectorSchema: (options: any) => import("@formily/react").Stringify<{
    [key: symbol]: any;
    [key: `x-${string}`]: any;
    [key: `x-${number}`]: any;
    version?: string;
    name?: import("@formily/react").SchemaKey;
    title?: any;
    description?: any;
    default?: any;
    readOnly?: boolean;
    writeOnly?: boolean;
    type?: import("@formily/react").SchemaTypes;
    enum?: import("@formily/react").SchemaEnum<any>;
    const?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string | RegExp;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string | boolean | string[];
    format?: string;
    $ref?: string;
    $namespace?: string;
    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
    additionalItems?: import("@formily/react").Stringify<any>;
    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    additionalProperties?: import("@formily/react").Stringify<any>;
    "x-value"?: any;
    "x-index"?: number;
    "x-pattern"?: any;
    "x-display"?: any;
    "x-validator"?: any;
    "x-decorator"?: any;
    "x-decorator-props"?: any;
    "x-component"?: any;
    "x-component-props"?: any;
    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
    "x-content"?: any;
    "x-data"?: any;
    "x-visible"?: boolean;
    "x-hidden"?: boolean;
    "x-disabled"?: boolean;
    "x-editable"?: boolean;
    "x-read-only"?: boolean;
    "x-read-pretty"?: boolean;
}>;
export declare const createCalendarBlockSchema: (options: any) => import("@formily/react").Stringify<{
    [key: symbol]: any;
    [key: `x-${string}`]: any;
    [key: `x-${number}`]: any;
    version?: string;
    name?: import("@formily/react").SchemaKey;
    title?: any;
    description?: any;
    default?: any;
    readOnly?: boolean;
    writeOnly?: boolean;
    type?: import("@formily/react").SchemaTypes;
    enum?: import("@formily/react").SchemaEnum<any>;
    const?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string | RegExp;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string | boolean | string[];
    format?: string;
    $ref?: string;
    $namespace?: string;
    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
    additionalItems?: import("@formily/react").Stringify<any>;
    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    additionalProperties?: import("@formily/react").Stringify<any>;
    "x-value"?: any;
    "x-index"?: number;
    "x-pattern"?: any;
    "x-display"?: any;
    "x-validator"?: any;
    "x-decorator"?: any;
    "x-decorator-props"?: any;
    "x-component"?: any;
    "x-component-props"?: any;
    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
    "x-content"?: any;
    "x-data"?: any;
    "x-visible"?: boolean;
    "x-hidden"?: boolean;
    "x-disabled"?: boolean;
    "x-editable"?: boolean;
    "x-read-only"?: boolean;
    "x-read-pretty"?: boolean;
}>;
export declare const createKanbanBlockSchema: (options: any) => import("@formily/react").Stringify<{
    [key: symbol]: any;
    [key: `x-${string}`]: any;
    [key: `x-${number}`]: any;
    version?: string;
    name?: import("@formily/react").SchemaKey;
    title?: any;
    description?: any;
    default?: any;
    readOnly?: boolean;
    writeOnly?: boolean;
    type?: import("@formily/react").SchemaTypes;
    enum?: import("@formily/react").SchemaEnum<any>;
    const?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string | RegExp;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string | boolean | string[];
    format?: string;
    $ref?: string;
    $namespace?: string;
    definitions?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    properties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    items?: import("@formily/react").SchemaItems<any, any, any, any, any, any, any, any>;
    additionalItems?: import("@formily/react").Stringify<any>;
    patternProperties?: import("@formily/react").SchemaProperties<any, any, any, any, any, any, any, any>;
    additionalProperties?: import("@formily/react").Stringify<any>;
    "x-value"?: any;
    "x-index"?: number;
    "x-pattern"?: any;
    "x-display"?: any;
    "x-validator"?: any;
    "x-decorator"?: any;
    "x-decorator-props"?: any;
    "x-component"?: any;
    "x-component-props"?: any;
    "x-reactions"?: import("@formily/react").SchemaReactions<any>;
    "x-content"?: any;
    "x-data"?: any;
    "x-visible"?: boolean;
    "x-hidden"?: boolean;
    "x-disabled"?: boolean;
    "x-editable"?: boolean;
    "x-read-only"?: boolean;
    "x-read-pretty"?: boolean;
}>;
